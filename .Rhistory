library(mclustcomp)
library(mclustcomp)
?mclustcomp
library(mclustcomp)
?mclustcomp
?`package-mclustcomp`
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
?mclustcomp
?`package-mclustcomp`
library(mclustcomp)
library(mclustcomp)
?mclustcomp
library(mclustcomp)
?mclustcomp
x = c("a","b","c","a","d","b")
x
xf = as.factor(x)
xf
as.numeric(xf)
RcppArmadillo::RcppArmadillo.package.skeleton("ttete")
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
?aux.genconfusion
library(mclustcomp)
library(mclustcomp)
?mclustcomp
?aux.genconfusion
library(mclustcomp)
?aux.getconfusion
?aux.genconfusion
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
nnames = c("adjrand","chisq","f","fmi","jaccard","mhm","mirkin","mmm","nmi1","nmi2","pd","rand","sdc","smc","vdm","vi")
sort(nnames)
type.names = c("adjrand","chisq","f","fmi","jaccard","mhm","mirkin","mmm","nmi1","nmi2","pd","rand","sdc","smc","vdm","vi")
type.names
x = "all"
y = c("all","all")
length(x)
length(unique(y))
("all" %in% x)
type.names[1]
x = data.frame(type.names)
x
type.score = 1:16
x = data.frame(type.names,type.score)
x
?data.frame
x = data.frame(type.score,row.names=type.names)
x
x = as.data.frame(type.score)
x
x = data.frame(1,type.score)
x
x = data.frame(t(type.score))
x
colnames(x) = type.names
x
switch
?switch
type.allnames = c("adjrand","chisq","f","fmi","jaccard","mhm","mirkin","mmm","nmi1","nmi2","pd","rand","sdc","smc","vdm","vi")
length(type.allnames)
type.allnames = c("adjrand","chisq","f","fmi","jaccard","mhm","mirkin","mmm","nmi1","nmi2","pd","rand","sdc","smc","tversky","vdm","vi")
length(type.allnames)
score03_f <- function(scx,scy,n){
# 3-1. preliminary
kk = length(scx)
ll = length(scy)
# 3-2. computation
output = 0
for (i in 1:kk){
tx = scx[i]
vecvaly = array(0,c(1,ll))
for (j in 1:ll){
vecvaly[j] = (2*tx*scy[j])/(tx+scy[j])
}
output = output + (tx*max(vecvaly))
}
return(output)
}
scx = c(3,45,2,5,7)
scy = c(1,2,3,4)
scy = c(1,2,3,4,sum(scx)-10)
score03_f(scx,scx,sum(scx))
scx/scx
dim(scx)
xx = rbind(scx,scx)
xx
dim(xx)
dim(xx)[1]
scx
sum(scx^2)
sum(scx**2)
type.allnames = c("adjrand","chisq","f","fmi","jaccard","mhm","mirkin","mmm","nmi1","nmi2","overlap","pd","rand","sdc","smc","tversky","vdm","vi")
length(type.allnames)
x
x = matrix(c(1,2,3,4),nrow=2)
x
sum(diag(x))
type.allnames = c("adjrand","chisq","f","fmi","jaccard","mhm","mirkin","mmm","nmi1","nmi2","overlap","pd","rand","sdc","smc","tanimoto","tversky","vdm","vi")
length(type.allnames)
type.allnames = c("adjrand","chisq","f","fmi","jaccard","mhm","mirkin","mmm","nmi1","nmi2","overlap","pd","rand","sdc","smc","tanimoto","tversky","vdm","vi")
length(type.allnames)
library(mclustcomp)
x = sample(1:4,10)
x = sample(1:4,10,replace=TRUE)
x
y = x
res = mclustcomp(x,y)
library(mclustcomp)
res = mclustcomp(x,y)
library(mclustcomp)
res = mclustcomp(x,y)
library(mclustcomp)
res = mclustcomp(x,y)
switch(do.this,
T1={X <- t(mtcars)
colSums(mtcars)%*%X
},
T2={X <- colMeans(mtcars)
outer(X, X)
},
stop("Enter something that switches me!")
)
library(mclustcomp)
res = mclustcomp(x,y)
type.score[1]
library(mclustcomp)
library(mclustcomp)
res = mclustcomp(x,y)
library(mclustcomp)
res = mclustcomp(x,y,type.out = "adjrand")
type.allnames = c("adjrand","chisq","f","fmi","jaccard","mhm","mirkin","mmm","nmi1","nmi2","overlap","pd","rand","sdc","smc","tanimoto","tversky","vdm","vi")
x = type.allnames[1]
x
typeof(x)
library(mclustcomp)
x
x = sample(1:5,20,replace=TRUE)
mclustcomp(x,x)
a = c("a","b")
b = c("a","c","d")
a %in% b
any(!(a%in%b))
x
y = x
n = length(x)
if (length(y)!=n){
stop("* mclustcomp : two vectors should be of same size.")
}
if (is.factor(x)){x = as.numeric(x)}
if (is.factor(y)){y = as.numeric(y)}
x=round(x); ux=unique(x);
y=round(y); uy=unique(y);
tversky.param = list()
if (!("alpha" %in% names(tversky.param))){tversky.param$alpha = 1}
if (!("beta" %in% names(tversky.param))){tversky.param$beta = 1}
if (!("sym" %in% names(tversky.param))){tversky.param$sym = FALSE}
if (tversky.param$alpha < 0){stop("* mclustcomp : tversky.param$alpha should be >= 0.")}
if (tversky.param$beta < 0){stop("* mclustcomp : tversky.param$beta should be >= 0.")}
if (!is.logical(tversky.param$sym)){stop("* mclustcomp : tversky.param$sym should
be a logical variable; FALSE for original Tversky index, TRUE for a variant.")}
confmat = get.confusion(x,y,ux,uy)
library(mclustcomp)
mclustcomp(x,x)
library(mclustcomp)
mclustcomp(x,x)
library(mclustcomp)
mclustcomp(x,x)
library(mclustcomp)
mclustcomp(x,x)
library(mclustcomp)
mclustcomp(x,x)
library(mclustcomp)
mclustcomp(x,x)
library(mclustcomp)
mclustcomp(x,x)
mclustcomp(x,x,type.out=c("f","mirkin"))
t(mclustcomp(x,x,type.out=c("f","mirkin")))
xxx = t(mclustcomp(x,x,type.out=c("f","mirkin")))
names(xxx)
rownames(xxx)
xxx$"f"
xxx
xxx[1,]
library(mclustcomp)
t(mclustcomp(x,x
)
)
(mclustcomp(x,x)
(mclustcomp(x,x))
result = (mclustcomp(x,x))
names(result)
norder = order(names(result))
result[norder]
library(mclustcomp)
library(mclustcomp)
?mclustcomp
library(mclustcomp)
?mclustcomp
library(mclustcomp)
?mclustcomp
library(mclustcomp)
library(mclustcomp)
?mclustcomp
library(mclustcomp)
?mclustcomp
library(mclustcomp)
?mclustcomp
library(mclustcomp)
?mclustcomp
library(mclustcomp)
?mclustcomp
x = sample(1:4,10,replace=TRUE)
y = x
z = sample(1:4,10,replace=TRUE)
mclustcomp(x,y)
mclustcomp(x,z)
library(mclustcomp)
?mclustcomp
library(mclustcomp)
?mclustcomp
?order
res = mclustcomp(x,z)
orderres = order(names(res),decreasing=TRUE)
orderres
res2 = res[orderres]
res2
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
?mclustcomop
?mclustcomp
mclustcomp(x,z)
mclustcomp(x,x)
mclustcomp(x,x)
mclustcomp(x,y)
mclustcomp(x,z)
library(mclustcomp)
?mclustcomp
library(mclustcomp)
?mclustcomp
## example 1. compare two identical clusterings
x = sample(1:5,10,replace=TRUE) # label from 1 to 5, 10 elements
y = x                           # set two labels x and y equal
mclustcomp(x,y)                 # show all results
z = sample(1:4,10,replace=TRUE)           # generate a non-trivial clustering
cmethods = c("jaccard","tanimoto","rand") # select 3 methods
mclustcomp(x,z,type.out=cmethods)         # test with the selected scores
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
?mclustcomp
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
?multiplyBy3
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
?prcomp
?mclustcomp
library(mclustcomp)
?mclustcomp
library(mclustcomp)
library(mclustcomp)
?mclustcomp
library(mclustcomp)
library(mclustcomp)
install.packages("abc")
require(abc)
?abc
library(mclustcomp)
?mclustcomp
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
?mclustcomp
library(mclustcomp)
?mclustcomp
?package-mclustcomp
?mclustcomp
library(mclustcomp)
install.packages("rorcid")
tparam = list()     # create an empty list
tparam$alpha = 2
tparam$beta  = 3
tparam$sym   = TRUE
mclustcomp(x,z,type.out="tversky")
x = sample(1:4,10,replace=TRUE)
y = x
z = sample(1:4,10,replace=TRUE)
mclustcomp(x,z,type.out="tversky")
mclustcomp(x,y,type.out="tversky")
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
## example 1. compare two identical clusterings
x = sample(1:5,10,replace=TRUE) # label from 1 to 5, 10 elements
y = x                           # set two labels x and y equal
mclustcomp(x,y)                 # show all results
## example 2. selection of a few methods
z = sample(1:4,10,replace=TRUE)           # generate a non-trivial clustering
cmethods = c("jaccard","tanimoto","rand") # select 3 methods
mclustcomp(x,z,type.out=cmethods)         # test with the selected scores
## example 3. tversky.param
tparam = list()     # create an empty list
tparam$alpha = 2
tparam$beta  = 3
tparam$sym   = TRUE
mclustcomp(x,z,type.out="tversky",tversky.param=tparam)
mclustcomp(x,z,type.out="tversky")
mclustcomp(x,z,type.out="tversky",tversky.param=tparam)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
install.packages("scholar")
require(scholar)
detach("package:scholar", unload=TRUE)
remove.packages("scholar", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
x = sample(1:5,10,replace=TRUE) # label from 1 to 5, 10 elements
y = x                           # set two labels x and y equal
mclustcomp(x,y,type.out="mmm")
mclustcomp(y,z,type.out="mmm")
mclustcomp(y,x,type.out="mmm")
z = sample(1:4,10,replace=TRUE)           # generate a non-trivial clustering
mclustcomp(x,z,type.out="mmm")
mclustcomp(z,x,type.out="mmm")
mclustcomp(z,x,type.out="mmm")$mmm
library(mclustcomp)
mclustcomp(x,x)
mclustcomp(x,y)
mclustcomp(x,z)
library(mclustcomp)
mclustcomp(x,y)
mclustcomp(x,x)
mclustcomp(x,z)
sum(mclustcomp(x,z))
length(x)
10*9/2
?mclustcomp
library(mclustcomp)
x = c("a","b","a","c")
x
as.numeric(x)
x = as.factor(x)
x
library(mclustcomp)
x = "asdf"
is.character(x)
strsplit(x)
strsplit(x,split="")
unlist(strsplit(x,split=""))
as.factor(unlist(strsplit(x,split="")))
library(mclustcomp)
library(mclustcomp)
x
y
z
mclustcomp(y,y)
??nmi
install.packages("nmi")
install.packages("NMI")
require(NMI)
library(mclustcomp)
NMI(y,y)
NMI
NMI(y,z)
?NMI
Y = data.frame(1:10,y)
Z = data.frame(1:10,z)
NMI(Y,Z)
mclustcomp(y,z,type.out=c("nmi1","nmi2"))
library(mclustcomp)
library(mclustcomp)
x = sample(1:5,10,replace=TRUE) # label from 1 to 5, 10 elements
y = x                           # set two labels x and y equal
z = sample(1:4,10,replace=TRUE)           # generate a non-trivial clustering
x
x = sample(1:5,20,replace=TRUE) # label from 1 to 5, 10 elements
y = x                           # set two labels x and y equal
z = sample(1:4,20,replace=TRUE)           # generate a non-trivial clustering
x
z
mclustcomp(x,x)
mclustcomp(x,y)
mclustcomp(,xz)
mclustcomp(x,z)
library(mclustcomp)
x
mclustcomp(x)
mclustcomp(x,y)
library(mclustcomp)
mclustcomp(x,x)
mclustcomp(x,y)
mclustcomp(x,z)
library(mclustcomp)
library(mclustcomp)
?match.arg
library(mclustcomp)
?mclustcomp
library(mclustcomp)
?mclustcomp
library(mclustcomp)
q()
library(mclustcomp)
x = sample(1:5,20,replace=TRUE) # label from 1 to 5, 10 elements
y = x                           # set two labels x and y equal
mclustcomp(x,y)                 # show all results
library(mclustcomp)
mclustcomp(x,y)                 # show all results
library(mclustcomp)
mclustcomp(x,y)                 # show all results
mclustcomp(x,y)
type.allnames = c("adjrand","chisq","f","fmi","jaccard","mhm","mirkin","mmm",
"mi","nmi1","nmi2","overlap","pd","rand","sdc","smc","tanimoto",
"tversky","vdm","vi","wallace1","wallace2")
for (i in 1:22){mclustcomp(x,y,type.out=type.allnames[i])}
for (i in 1:22){print(mclustcomp(x,y,type.out=type.allnames[i]))}
library(mclustcomp)
type.allnames = c("adjrand","chisq","f","fmi","jaccard","mhm","mirkin","mmm",
"mi","nmi1","nmi2","overlap","pd","rand","sdc","smc","tanimoto",
"tversky","vdm","vi","wallace1","wallace2")
for (i in 1:22){print(mclustcomp(x,y,type.out=type.allnames[i]))}
for (i in 1:22){print(mclustcomp(x,y,types=type.allnames[i]))}
library(mclustcomp)
type.allnames = c("adjrand","chisq","f","fmi","jaccard","mhm","mirkin","mmm",
"mi","nmi1","nmi2","overlap","pd","rand","sdc","smc","tanimoto",
"tversky","vdm","vi","wallace1","wallace2")
for (i in 1:22){print(mclustcomp(x,y,types=type.allnames[i]))}
library(mclustcomp)
rm(list=ls())
rm(list=ls())
library(mclustcomp)
x = sample(1:5,20,replace=TRUE) # label from 1 to 5, 10 elements
y = x                           # set two labels x and y equal
mclustcomp(x,y)                 # show all results
library(mclustcomp)
mclustcomp(x,y)                 # show all results
library(mclustcomp)
mclustcomp(x,y)                 # show all results
library(mclustcomp)
out=mclustcomp(x,y)                 # show all results
out
library(mclustcomp)
out=mclustcomp(x,y)                 # show all results
out$type_score
library(mclustcomp)
out=mclustcomp(x,y)                 # show all results
out
rm(list=ls())
library(mclustcomp)
## example 1. compare two identical clusterings
x = sample(1:5,20,replace=TRUE) # label from 1 to 5, 10 elements
y = x                           # set two labels x and y equal
mclustcomp(x,y)                 # show all results
## example 2. selection of a few methods
z = sample(1:4,20,replace=TRUE)           # generate a non-trivial clustering
cmethods = c("jaccard","tanimoto","rand") # select 3 methods
mclustcomp(x,z,type.out=cmethods)         # test with the selected scores
mclustcomp(x,z,types=cmethods)         # test with the selected scores
tparam = list()                           # create an empty list
tparam$alpha = 2
tparam$beta  = 3
tparam$sym   = TRUE
mclustcomp(x,z,types="tversky")        # default set as Tanimoto case.
mclustcomp(x,z,types="tversky",tversky.param=tparam)
library(mclustcomp)
library(mclustcomp)
rm(list=ls())
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
devtools::check(manual=TRUE)
library(mclustcomp)
devtools::check(manual=TRUE)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
X = matrix(rnorm(20*5),nrow = 20)
D = as.matrix(dist(X))^2
library(Matrix)
rankMatrix(D)
usethis::use_readme_rmd(".")
usethis::use_travis(".")
usethis::use_travis()
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
library(mclustcomp)
