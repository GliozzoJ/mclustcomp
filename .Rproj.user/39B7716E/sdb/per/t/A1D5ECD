{
    "collab_server" : "",
    "contents" : "// [[Rcpp::depends(RcppArmadillo)]]\n#include \"RcppArmadillo.h\"\n\nusing namespace Rcpp;\nusing namespace arma;\n\n/*\n * Aux 1. compute confusion matrix\n */\n//' Compute confusion matrix\n//'\n//' @keywords internal\n// [[Rcpp::export(\"get.confusion\")]]\nNumericMatrix getconfusion(NumericVector x, NumericVector y, NumericVector ux, NumericVector uy){\n  // 1. preprocessing\n  const int k = ux.length();\n  const int l = uy.length();\n  const int n = x.length();\n  NumericMatrix confmat(k,l);\n\n  // 2. main iteration\n  for (int it1=0;it1<k;it1++){\n    int tgtx = ux[it1];\n    for (int it2=0;it2<l;it2++){\n      int tgty = uy[it2];\n      for (int it3=0;it3<n;it3++){\n        if ((x[it3]==tgtx)&&(y[it3]==tgty)){\n          confmat(it1,it2) += 1;\n        }\n      }\n    }\n  }\n\n  // 3. return output\n  return confmat;\n}\n/*\n * Aux 2. compute community size\n */\n//' Compute community size of a clustering\n//'\n//' @keywords internal\n// [[Rcpp::export(\"get.commsize\")]]\nNumericVector getcommsize(NumericVector x, NumericVector ux){\n  // 1. preliminary\n  const int n = x.length();\n  const int lux = ux.length();\n  NumericVector sizeinfo(lux);\n  // 2. main iteration\n  for (int i=0;i<lux;i++){\n    int tgt = ux[i];\n    for (int j=0;j<n;j++){\n      if (x[j]==tgt){\n        sizeinfo[i]+=1;\n      }\n    }\n  }\n  // 3. return\n  return sizeinfo;\n}\n/*\n * Aux 3. compute comembership\n */\n//' Comembership matrix of size \\code{(2-by-2)}\n//'\n//' @keywords internal\n// [[Rcpp::export(\"get.pair\")]]\nNumericMatrix getpair(NumericVector x, NumericVector y){\n  // 0. length of vectors\n  const int n = x.length();\n  // 1. prepare an empty confusion matrix\n  NumericMatrix pairmat(2,2);\n  // 2. iterate over nC2 case\n  for (int i=0;i<n;i++){\n    for (int j=(i+1);j<n;j++){\n      bool flagx;\n      bool flagy;\n      // 2-1. check on x\n      if (x[i]==x[j]){\n        flagx = true;\n      } else{\n        flagx = false;\n      }\n      // 2-2. check on y\n      if (y[i]==y[j]){\n        flagy = true;\n      } else{\n        flagy = false;\n      }\n      // 2-3. add on pairmat\n      if (flagx){\n        if (flagy){\n          pairmat(0,0) += 1;\n        } else {\n          pairmat(0,1) += 1;\n        }\n      } else {\n        if (flagy){\n          pairmat(1,0) += 1;\n        } else {\n          pairmat(1,1) += 1;\n        }\n      }\n    }\n  }\n  // 3. return\n  return pairmat;\n}\n\n/*\n * Aux 4. compute probability related materials\n */\n//' Compute confusion matrix\n//'\n//' @keywords internal\n// [[Rcpp::export(\"get.probs\")]]\nList getprobs(NumericMatrix confmat, NumericVector scx, NumericVector scy, const int n, double threps){\n  // 1. preliminary\n  const int nk = scx.length();\n  const int nl = scy.length();\n  NumericVector altthr(2);\n  altthr[0] = threps;\n  altthr[1] = 1e-7;\n  double maxthr = max(altthr);\n  int warningint = 0; // 1<-Px, 2<-Py, 3<-Pxy\n\n  // 2. compute::basics\n  NumericVector Px  = scx/n;\n  NumericVector Py  = scy/n;\n  NumericMatrix Pxy = confmat/n;\n  for (int i=0;i<nk;i++){\n    if (Px[i]<threps){\n      Px[i] = maxthr;\n      warningint = 1;\n    } else if (Px[i]>1-threps){\n      Px[i] = 1-maxthr;\n      warningint = 1;\n    }\n  }\n  for (int j=0;j<nl;j++){\n    if (Py[j]<threps){\n      Py[j] = maxthr;\n      warningint = 2;\n    } else if (Py[j]>1-threps){\n      Py[j] = 1-maxthr;\n      warningint = 2;\n    }\n  }\n  for (int i=0;i<nk;i++){\n    for (int j=0;j<nl;j++){\n      if (Pxy(i,j)<threps){\n        Pxy(i,j) = maxthr;\n        warningint = 3;\n      } else if (Pxy(i,j)>1-threps){\n        Pxy(i,j) = 1-maxthr;\n        warningint = 3;\n      }\n    }\n  }\n\n  // 3. compute::3 measures\n  double log2 = log(2.0);\n  double Hx = 0;\n  for (int i=0;i<nk;i++){\n    Hx -= Px[i]*log(Px[i])/log2;\n  }\n  double Hy = 0;\n  for (int j=0;j<nl;j++){\n    Hy -= Py[j]*log(Py[j])/log2;\n  }\n  double Ixy = 0;\n  for (int i=0;i<nk;i++){\n    for (int j=0;j<nl;j++){\n      Ixy += Pxy(i,j)*((log(Pxy(i,j))-log(Px[i])-log(Py[j]))/log2);\n    }\n  }\n\n  // 4. return\n  List output;\n  output[\"Hx\"] = Hx;\n  output[\"Hy\"] = Hy;\n  output[\"Ixy\"] = Ixy;\n  output[\"warningint\"] = warningint;\n  return output;\n}\n",
    "created" : 1509458007353.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3635648729",
    "id" : "A1D5ECD",
    "lastKnownWriteTime" : 1509458053,
    "last_content_update" : 1509458053591,
    "path" : "~/Desktop/mclustcomp/src/auxiliary.cpp",
    "project_path" : "src/auxiliary.cpp",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}